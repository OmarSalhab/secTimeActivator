# Define the unique key for this command (you should generate a new key for each customer)
$key = "UNIQUE-CUSTOMER-KEY-8"

# Define the server-side endpoint that checks and tracks key usage
$validationUrl = "https://key-validation-backend.onrender.com"

# Check if the key has already been used remotely
try {
    $response = Invoke-WebRequest -Uri "$validationUrl?key=$key" -Method GET
    $responseContent = $response.Content
    Write-Host "Response: $responseContent"
    
    if ($responseContent -eq "invalid") {
        Write-Host "This key has already been used remotely and cannot be executed again." -ForegroundColor Red
        exit
    }
} catch {
    Write-Host "Error contacting the server for validation: $_" -ForegroundColor Red
    exit
}

# Local marker to prevent multiple executions on the same machine
$markerFile = "$env:USERPROFILE\.activation_marker_$key"

if (Test-Path $markerFile) {
    Write-Host "This command has already been used on this machine and cannot be executed again." -ForegroundColor Red
    exit
}

# Execute the original command
try {
    # Create a temporary file to store the downloaded script
    $tempFile = [System.IO.Path]::GetTempFileName()
    
    # Download the script from the URL
    Invoke-WebRequest -Uri "https://raw.githubusercontent.com/massgravel/Microsoft-Activation-Scripts/refs/heads/master/MAS/Separate-Files-Version/Change_Windows_Edition.cmd" -OutFile $tempFile

    # Ensure file was downloaded
    if (Test-Path $tempFile) {
        # Check if it's a .cmd file or a .ps1 file
        if ($tempFile.EndsWith(".cmd")) {
            # Execute the downloaded .cmd file using cmd.exe
            cmd.exe /c $tempFile
        } elseif ($tempFile.EndsWith(".ps1")) {
            # Execute the downloaded .ps1 file using iex (PowerShell script)
            $scriptContent = Get-Content $tempFile -Raw
            $scriptContent | iex
        }

        # If successful, mark the key as used locally and remotely
        New-Item -Path $markerFile -ItemType File -Force | Out-Null

        # Notify the server that the key was used successfully
        $postResponse = Invoke-WebRequest -Uri "$validationUrl?key=$key" -Method POST
        Write-Host "POST Response: $($postResponse.Content)"

        Write-Host "Command executed successfully. It will not run again." -ForegroundColor Green
    } else {
        Write-Host "Failed to download the activation script." -ForegroundColor Red
        exit
    }
} catch {
    Write-Host "An error occurred while executing the command: $_" -ForegroundColor Red
    exit
}
